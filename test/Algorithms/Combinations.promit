/**
 * This is a combination generation algorithm, created by SD Asif Hossein.
 * Read more about the algorithm at : 
 *     https://medium.com/codex/generating-combinations-efficiently-with-asifs-algorithm-d453e803893
 * 
 * Part of Promit Test Suit, location /test/Algorithms/Combinations.promit
 * 
 * Created by SD Asif Hossein on 20 April, 2022 (Monday) at 12:13 AM.
 */

/**
 * Generates combination using Asif's Algorithm.
 * 
 * @param {list} List
 * @param {r} Number
 * @returns List
 */

fn Combinations(list, r) {
    // To clear the Object Reference.

    list = list && list.slice() || [];

    take length = len(list);

    // Base criteria 1.

    if(!length || r > length || !r) 
        return [ [] ];

    // Base criteria 2.

    else if(r == length) 
        return [ list ];
    
    // Base criteria 3.

    if(r == 1) return list.fold(fn(x, elem) {
        x.insert([ elem ]);

        return x;
    }, []);

    // Get the first element from the list.

    take head = list.pop();

    // Generate the first set combinations and insert the head to the front.

    return Combinations(list, r - 1).map(fn(x) {
        x.insert_front(head);

        return x;
    }).append(Combinations(list, r));    // Append the second set of combinations.
}

// Calculate time for benchmarking.

take start_time = Time::snap();

take combinations = Combinations([ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' ], 7);

take length = len(combinations);

for(take i = 0; i < length; i++) 
    showl combinations[i];

showl 'Generated $length combinations!';
showl 'Took ${Time::snap() - start_time} seconds (CPU)!';
