/**
 * This is a combination generation algorithm, created by SD Asif Hossein.
 * Read more about the algorithm at : 
 *     https://medium.com/codex/generating-combinations-efficiently-with-asifs-algorithm-d453e803893
 * 
 * Part of Promit Test Suit, location /test/Algorithms/Combination.promit
 * 
 * Created by SD Asif Hossein on 20 April, 2022 (Monday) at 12:13 AM.
 */

/**
 * Generates combination using Asif's Algorithm.
 * 
 * @param {list} List
 * @param {r} Number
 * @returns List
 */

fn reduce(list, callback, start) {
	for(take i = 0; i < len(list); i++) {
		start = callback(start, list[i]);
	}

	return start;
}

fn slice(list, start, quantity) {
	quantity = quantity || len(list);

	take l = [];

	for(take i = start; i < quantity; i++) 
		l[len(l)] = list[i];
	
	return l;
}

fn map(list, callback) {
	take l = [];

	for(take i = 0; i < len(list); i++) {
		l[len(l)] = callback(list[i]);
	}

	return l;
}

fn concat(list, anotherList) {
	if(typeof list != 'list') 
		showl 'Debug : $list';
	
	if(typeof anotherList != 'list') 
		showl '(an) Debug : $anotherList';

	for(take i = 0; i < len(anotherList); i++) 
		list[len(list)] = anotherList[i];
	
	return list;
}

fn Combination(list, r) {
	list = list && list.slice() || [];

	take length = len(list);

	if(!length || r > length || !r) 
		return [ [] ];
	else if(r == length) 
		return [ list ];

	if(r == 1) {
		return list.reduce(fn reducefn(x, elem) {
			x.insert([ elem ]);

			return x;
		}, []);
	}
	
	take head = list.pop();

	return Combination(list, r - 1).map(fn mapfn(x) {
		x.insert_front(head);

		return x;
	}).append(Combination(list, r));
}

// Calculate time for benchmarking.

take start_time = Time::now();

take combinations = Combination(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'], 7);

take length = len(combinations);

for(take i = 0; i < length; i++) 
	showl combinations[i];

showl 'Generated $length combiations!';
showl 'Took ${Time::now() - start_time} milliseconds!';
